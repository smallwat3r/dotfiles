#!/usr/bin/env bash

# {{{1 (monitor-pods) monitor kube pods memory from a namespace

monitor-pods() {
  if [[ -z "$1" ]]; then
    printf 'Please specify a namespace.\n'
  else
    while true; do
      kubectl -n "$1" top pods --use-protocol-buffers
      sleep 1
    done
  fi
}

# }}}1
# {{{1 (cr) cd root of git repo

cr() {
  cd "$(git rev-parse --show-toplevel)" || exit
}

# }}}1
# {{{1 (dip) docker ip by name

dip() {
  docker inspect --format '{{ .NetworkSettings.IPAddress }}' \
    "$(docker ps |
      grep "$1" 2>/dev/null |
      cut -d ' ' -f1)" 2>/dev/null || printf 'Cannot find %s\n' "$1" >&2
}

# }}}1
# {{{1 (dlog) docker show logs by name

dlog() {
  docker logs --follow \
    "$(docker ps |
      grep "$1" 2>/dev/null |
      cut -d ' ' -f1)" 2>/dev/null || printf 'Cannot find %s\n' "$1" >&2
}

# }}}1
# {{{1 (dps) shorten docker ps

dps() {
  docker ps --format '{{.ID}} ¬¬¬ {{.Image}} ¬¬¬ {{.Names}} ¬¬¬ {{.Status}}' |
    column -t -s '¬¬¬' -c "$(tput cols)"
}

# }}}1
# {{{1 (dpsa) shorten docker ps -a

dpsa() {
  docker ps -a --format '{{.ID}} ¬¬¬ {{.Image}} ¬¬¬ {{.Names}} ¬¬¬ {{.Status}}' |
    column -t -s '¬¬¬' -c "$(tput cols)"
}

# }}}1
# {{{1 (dprune) docker prune

dprune() {
  printf 'y' | docker system prune
}

# }}}1
# {{{1 (drm) docker delete image

drm() {
  docker rmi "$1" -f
}

# }}}1
# {{{1 (dsh) docker enter in shell by name

dsh() {
  local _name
  _name=$(
    docker ps |
      grep "$1" 2>/dev/null |
      cut -d ' ' -f1
  )
  docker exec -it "$_name" /bin/sh 2>/dev/null ||
    printf 'Error finding %s\n' "$1" >&2
}

# }}}1
# {{{1 (hs) Grep history

hs() {
  history 1 | grep "$@"
}

# }}}1
# {{{1 (hsu) Grep history (unique matches)

hsu() {
  history 1 | sort -u | grep "$@"
}

# }}}1
# {{{1 (mkd) create and enter directory

mkd() {
  mkdir -p "$@" && cd "$@" || exit
}

# }}}1
# {{{1 (o) open current dir or the one in args

o() {
  if [[ $# -eq 0 ]]; then
    open .
  else
    open "$@"
  fi
}

# }}}1
# {{{1 (pubkey) copy public key to clipboard

pubkey() {
  more "$HOME/.ssh/id_rsa.pub" | pbcopy
  printf 'Public key copied to clipboard.\n'
}

# }}}1
# {{{1 (urls) rg - get urls

urls() {
  rg '[a-zA-Z]+://[-a-zA-Z0-9._+]+[-a-zA-Z0-9._+#=?&:;%/!~()]+'
}

# }}}1
# {{{1 (zipall) zip all individual files in current directory into a zipfile.

zipall() {
  local file
  for file in $(echo *(^/)); do
    zip "${file%.*}.zip" "$file"
  done
}

# }}}1
