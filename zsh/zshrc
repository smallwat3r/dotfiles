#!/bin/zsh
# Author: Matthieu Petiteau <mpetiteau.pro@gmail.com>
# ZSH config.

# Env{{{
# --------------------------------------------------------------------------------------

export ZSH="$HOME/.oh-my-zsh"
export TERM="xterm-256color"
export CLICOLOR=1
export EDITOR="/usr/local/bin/nvim"
export LDFLAGS="-L/usr/local/opt/python@3.8/lib"

export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"

# paths
export PATH="/usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin"
export PATH="$HOME/bin:$PATH"
export PATH="$HOME/.cargo/bin:$PATH"
export PATH="/usr/local/opt/python@3.8/bin:$PATH"
export GOPATH="$HOME/go"
export PATH="$HOME/go/bin:$PATH"

# grep colors
export GREP_OPTIONS='--color=auto'
export GREP_COLOR='0;30;42'

# Shorter timeout ESC
export KEYTIMEOUT=1

# Homebrew
export HOMEBREW_NO_ANALYTICS=1
export HOMEBREW_NO_AUTO_UPDATE=1

# History
export HISTSIZE=32768
export HISTFILESIZE=$HISTSIZE

# fzf (installed from nvim)
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

export FZF_DEFAULT_OPTS="
--height 96% --reverse --border
--color fg:231,bg:0,hl:199,fg+:231,bg+:0,hl+:190
--color info:189,prompt:161,spinner:201,pointer:201,marker:118
"
export FZF_DEFAULT_COMMAND='rg --files --hidden --follow -g "!__pycache__/" -g "!.git/"'

# Tmux on start
case $- in *i*)
  if [ -z "$TMUX" ]; then
    exec tmux
  fi
esac
# }}}
# Aliases{{{
# --------------------------------------------------------------------------------------

alias vi="nvim"
alias vim="nvim"
alias svi="sudo nvim"
alias edit="$EDITOR"
alias e="$EDITOR"
alias vimdiff="nvim -d"
alias vidiff="nvim -d"
alias dots="cd $HOME/dotfiles"
alias vie="$EDITOR $HOME/dotfiles/vim/init.vim"
alias zshe="$EDITOR $HOME/dotfiles/zsh/zshrc"
alias python="python3.8"
alias pip="pip3.8"
alias lg="lazygit"
alias fonts="open $HOME/Library/Fonts"
alias venv="python -m venv venv"
alias c="clear"
alias qq="exit"
alias sp="tmux splitw -v"
alias vs="tmux splitw -h"
alias tks="tmux kill-session -t"
alias tksa="tmux kill-session -a"
alias tls="tmux list-sessions"
alias p="pwd"
alias ls="ls -p"
alias ls.="ls -d .*"
alias trecord="asciinema rec"
alias record2gif="asciicast2gif -t monokai"
alias sk="sketch"
alias hs="history | rg"
alias hsu="history | cut -c 8- | sort -u | rg"
alias pubkey="more ~/.ssh/id_rsa.pub | pbcopy | echo '=> Public key copied to pasteboard.'"
alias pubip="curl http://ipecho.net/plain; echo"
alias myip="curl http://ipecho.net/plain; echo"
alias locip="ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]* | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1'"
alias g="git"
alias ga="git add "
alias gs="git status "
alias gc="git commit "
alias gp="git push "
alias cdr='cd $(git rev-parse --show-cdup)'
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
# }}}
# Functions{{{
# --------------------------------------------------------------------------------------

# open current dir or the one in args
o() {
  if [ $# -eq 0 ]; then
    open .
  else
    open "$@"
  fi
}

# ripgrep - get urls
urls() {
  rg '[a-zA-Z]+://[-a-zA-Z0-9._+]+[-a-zA-Z0-9._+#=?&:;%/!~()]+'
}

# create and enter directory
mkd() {
  mkdir -p "$@" && cd "$@"
}

# preview csv files. source: http://stackoverflow.com/questions/1875305/command-line-csv-viewer
csvpreview() {
  sed 's/,,/, ,/g;s/,,/, ,/g' "$@" | column -s, -t | less -#2 -N -S
}

# extract file. source: http://nparikh.org/notes/zshrc.txt
extract() {
  if [ -f $1 ]; then
    case $1 in
      *.tar.bz2) tar -jxvf $1 ;;
      *.tar.gz) tar -zxvf $1 ;;
      *.bz2) bunzip2 $1 ;;
      *.dmg) hdiutil mount $1 ;;
      *.gz) gunzip $1 ;;
      *.tar) tar -xvf $1 ;;
      *.tbz2) tar -jxvf $1 ;;
      *.tgz) tar -zxvf $1 ;;
      *.zip) unzip $1 ;;
      *.ZIP) unzip $1 ;;
      *.pax) cat $1 | pax -r ;;
      *.pax.Z) uncompress $1 --stdout | pax -r ;;
      *.rar) unrar x $1 ;;
      *.Z) uncompress $1 ;;
      *) echo "'$1' cannot be extracted/mounted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# FZF select and open file
fe() {
  IFS=$'\n' files=($(fzf --query="$1" --preview "cat {}" --multi --select-1 --exit-0))
  [[ -n "$files" ]] && $EDITOR "${files[@]}"
}

# FZF fuzzy ripgrep
frg() {
  local file line
  read -r file line <<<"$(rg --column --line-number --no-heading --smart-case $@ | fzf --query=$@ | awk -F: '{print $1, $2}')"
  if [[ -n $file ]]; then
    $EDITOR $file +$line
  fi
}

# FZF checkout git branch (including remote branches)
fbr() {
  local branches branch
  branches=$(git branch --all | grep -v HEAD)
  branch=$(echo "$branches" | fzf -d $(( 2 + $(wc -l <<< "$branches") )) +m)
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

# FZF git commit browser
fco() {
  git log --graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
    fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort --bind \
      "ctrl-m:execute: (grep -o '[a-f0-9]\{7\}' | head -1 | xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
      {}
      FZF-EOF"
}

# FZF Select a docker container to start and attach to
da() {
  local cid
  cid=$(docker ps -a | sed 1d | fzf -1 -q "$1" | awk '{print $1}')
  [ -n "$cid" ] && docker start "$cid" && docker attach "$cid"
}

# FZF Select a running docker container to stop
ds() {
  local cid
  cid=$(docker ps | sed 1d | fzf -q "$1" | awk '{print $1}')
  [ -n "$cid" ] && docker stop "$cid"
}

# FZF Select a docker container to remove
drm() {
  local cid
  cid=$(docker ps -a | sed 1d | fzf -q "$1" | awk '{print $1}')
  [ -n "$cid" ] && docker rm "$cid"
}
# }}}
# Antigen{{{
# --------------------------------------------------------------------------------------

source /usr/local/share/antigen/antigen.zsh
antigen use oh-my-zsh

antigen bundle git
antigen bundle git-prompt
antigen bundle zsh-users/zsh-syntax-highlighting
antigen bundle zsh-users/zsh-autosuggestions
antigen bundle zsh-users/zsh-completions
antigen bundle softmoth/zsh-vim-mode

antigen apply
# }}}
# Prompt (with vim-like mode){{{
# --------------------------------------------------------------------------------------

# zsh completions
COMPLETION_WAITING_DOTS="true"
DISABLE_UNTRACKED_FILES_DIRTY="true"

# zsh auto-suggestions colors
ZSH_AUTOSUGGEST_USE_ASYNC="true"
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=200"

# vim-mode indicator
MODE_INDICATOR_VICMD='%F{5}N %f'
MODE_INDICATOR_REPLACE='%F{1}R %f'
MODE_INDICATOR_SEARCH='%F{2}S %f'
MODE_INDICATOR_VISUAL='%F{4}V %f'
MODE_INDICATOR_VLINE='%F{4}V %f'

# vim-mode cursors
MODE_CURSOR_VICMD="#7dff2b block"
MODE_CURSOR_VIINS="#20d08a bar"
MODE_CURSOR_SEARCH="#ff00ff steady underline"

# git prompt
ZSH_THEME_GIT_PROMPT_PREFIX="("
ZSH_THEME_GIT_PROMPT_SUFFIX=") "
ZSH_THEME_GIT_PROMPT_SEPARATOR=" "
ZSH_THEME_GIT_PROMPT_BRANCH=""
ZSH_THEME_GIT_PROMPT_STAGED="%{$fg[magenta]%}%{.%G%}"
ZSH_THEME_GIT_PROMPT_CONFLICTS="%{$fg[red]%}%{x%G%}"
ZSH_THEME_GIT_PROMPT_CHANGED="%{$fg[yellow]%}%{+%G%}"
ZSH_THEME_GIT_PROMPT_BEHIND="%{↓%G%}"
ZSH_THEME_GIT_PROMPT_AHEAD="%{↑%G%}"
ZSH_THEME_GIT_PROMPT_UNTRACKED="%{…%G%}"
ZSH_THEME_GIT_PROMPT_CLEAN="%{$fg_bold[green]%}%{✔%G%}"

# set up PS1 and RPS1
PS1='${MODE_INDICATOR_PROMPT}%1~ $(git_super_status)%# '
RPS1="%{$fg[red]%}%(?.. %?)%{$reset_color%}"

# zsh vim yank to clipboard (using pbcopy)
vi_yank_pbcopy() {
  zle vi-yank
  echo "$CUTBUFFER" | pbcopy
}
zle -N vi_yank_pbcopy
bindkey -M vicmd 'y' vi_yank_pbcopy
# }}}
