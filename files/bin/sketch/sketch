#!/usr/bin/env bash
#         __       __      __
#    ___ / /_____ / /_____/ /
#   (_-</  '_/ -_) __/ __/ _ \
#  /___/_/\_\\__/\__\__/_//_/
#
# Matthieu Petiteau <mpetiteau.pro@gmail.com>
#
# MIT License
#
# Copyright (c) 2019 Matthieu Petiteau
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -e
self=${0##*/}
version="$self v0.3 (Matthieu Petiteau)"

_load_editor() {
  # Check first for editor from sketchrc, then user default editor,
  # and finally default to vim.
  if [[ -z $SKETCH_EDITOR ]]; then
    [[ -z $EDITOR ]] && echo 'vim' || echo $EDITOR
  else
    echo $SKETCH_EDITOR
  fi
}

_load_archives_dir() {
  # Pick archives dir.
  if [[ -z $SKETCH_ARCHIVES ]]; then
    [[ -d $XDG_DATA_HOME ]] &&
      echo "$XDG_DATA_HOME/sketch_archives" ||
      echo "$HOME/.local/share/sketch_archives"
  else
    echo $SKETCH_ARCHIVES
  fi
}

_init() {
  # Source config.
  local _conf_dir=(
    $XDG_CONFIG_HOME/.sketchrc
    $HOME/.config/.sketchrc
    $HOME/.sketchrc
  )
  local _d
  for _d in "${_conf_dir[@]}"; do
    [[ -f $_d ]] &&
      {
        source $_d
        break
      }
  done

  _sketch_editor="$(_load_editor)"
  _sketch_archives="$(_load_archives_dir)"

  # Create archives dir if doesn't exist.
  [[ -d $_sketch_archives ]] || mkdir -p $_sketch_archives
}

_info() {
  cat <<EOF
      __       __      __
 ___ / /_____ / /_____/ /
(_-</  '_/ -_) __/ __/ _ \'
/___/_/\_\\__/\__/\__/_//_/

Copyright 2020 Matthieu Petiteau, all rights reserved.
$version

$self is a small productivity tool to rapidly generate and
access draft files from the terminal.

You can create a sketchrc file to configure sketch.

.sketchrc directory location by priority order:
  $\XDG_CONFIG_HOME/.sketchrc
  $\HOME/.config/.sketchrc
  $\HOME/.sketchrc

SKETCH_EDITOR: sketch default editor, if not set, check for
\$EDITOR if global env vars, if not set, default to vim.

SKETCH_ARCHIVES: archived files folder from where your sketch
files will be archived.

.sketchrc example file:
  # Sketch editor (vim, nvim, subl, emacs, nano etc)
  SKETCH_EDITOR=vim
  # Archived file folder.
  # Default locations:
  #   - $\XDG_DATA_HOME/sketch_archives
  #   - $\HOME/.local/share/sketch_archives
  SKETCH_ARCHIVES=$\HOME/.sketch_archives

EOF
}

_usage() {
  cat <<EOF
Usage:
  $self            creates a new draft file.

  $self <number>   open archived saved file. Ex:
                    $self 1 will reopen the last saved file.
                    $self 2 will reopen the previous one
                    etc...

  $self ls         list all archived files.

  $self purge      delete all the archived files.

Options:
  -h, --help        show help and exit.
  -u, --usage       show usage and exit.
  -v, --version     script version.

EOF
}

_new() {
  local _file_nb=$(($(
    ls -1r $_sketch_archives |
      head -1 |
      cut -f 1 -d '.'
  ) + 1))

  [[ -z $_file_nb ]] &&
    $_sketch_editor "$_sketch_archives/1.sketch" ||
    $_sketch_editor "$_sketch_archives/$_file_nb.sketch"
}

_reopen() {
  (($1 == 0)) &&
    {
      printf 'Index starts at 1.\n' >&2
      exit 1
    }

  local _file="$_sketch_archives/$1.sketch"

  [[ -f $_file ]] && $_sketch_editor $_file ||
    {
      printf '%s\n%s\n' \
        'It seems that this file does not exists.' \
        'You can run `sketch ls` to see the existing ones.' >&2
      exit 1
    }
}

_purge() {
  [[ -n $(ls -A $_sketch_archives 2>/dev/null) ]] &&
    {
      rm $_sketch_archives/*
      printf 'Archived files have been deleted.\n'
    } || printf 'No files to delete.\n' >&2
}

_list() {
  ls -lt -A $_sketch_archives |
    awk '{
      split($9, name, ".");
      if (name[1])
        print "[", name[1], "]", "last edit @", $8, "on", $7, $6;
    }'
}

_init
_param=$1

[[ -z $_param ]] &&
  {
    _new
    exit 0
  }

case $_param in
  $(awk '/^[0-9]+$/' <<<${_param}))
    _reopen "${_param}"
    ;;
  purge)
    _purge
    ;;
  ls)
    _list
    ;;
  -h | --help)
    _info
    _usage
    ;;
  -u | --usage)
    _usage
    ;;
  -v | --version)
    printf "$version\n"
    ;;
  *)
    printf '%s\n%s\n' \
      "Error: Command $_param not found." \
      "Run $self -u for usage and see the list of supported options." >&2
    exit 127
    ;;
esac
exit 0
