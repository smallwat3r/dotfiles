# TMUX config

# {{{ general config

set -g mouse on       # mouse support
set -s escape-time 0  # fast command sequence

# vi mode
set-window-option -g mode-keys vi

#Â terminal settings
set -g default-terminal 'tmux-256color'
set -ga terminal-overrides ',*256col*:Tc'
set -ga terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q'

set -g base-index 1           # index start at 1
setw -g pane-base-index 1     # panes index start at 1
setw -g automatic-rename on   # rename window to reflect current program
set -g renumber-windows on    # renumber windows when a window is closed

# }}} general config
# {{{ panes

# set -g pane-border-status top
set -g pane-border-format " #{pane_index} #T "
set -g pane-border-style 'bg=default fg=white'
set -g pane-active-border-style 'bg=default fg=cyan'

# }}} panes
# {{{ statusbar

set -g status-position bottom
set -g status-justify centre
set -g status-bg default
set -g status-fg white
set -g status-left-length '100'
set -g status-right-length '100'
set -g window-status-format "#I:#W"
set -g window-status-current-format "#[fg=cyan](#I:#W)"
set -g status-left " (#S) #(/usr/local/bin/localip) "
set -g status-right " batt #(/usr/local/bin/battery) %d-%h %H:%M "

# }}} statusbar
# {{{ bindings

unbind C-b          # unmap leader
set -g prefix C-a   # remap leader key

# reload config
unbind r
bind r source-file ~/.tmux.conf \; display 'tmux config reloaded'

# create new panes / windows
bind c new-window      -c "#{pane_current_path}"
bind / split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# next / Previous window
bind C-p previous-window
bind C-n next-window

# resize panes
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2

# vim mode on selection and yank
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'y' send -X copy-selection-and-cancel

# Rename pane title
bind t command-prompt -p "(rename-pane)" -I "#T" "select-pane -T '%%'"

# toggle pane title visibility
bind P run 'zsh -c "arr=( off top ) && \
    tmux setw pane-border-status \${arr[\$(( \
    \${arr[(I)#{pane-border-status}]} % 2 + 1 ))]}"'

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'

if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R

# }}} bindings
