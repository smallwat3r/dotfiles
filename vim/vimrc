" File  : vimrc
" Author: Matthieu Petiteau <mpetiteau.pro@gmail.com>
" Date  : 09.01.2020
"
" vim config file
"

"
" PLUGIN MANAGER
" --------------------------------------------------------------------
" Using vim-plug
call plug#begin()

Plug 'dense-analysis/ale'
Plug 'jiangmiao/auto-pairs'
Plug 'smallwat3r/vim-simplicity'
Plug 'Chiel92/vim-autoformat'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-vinegar'
Plug 'dhruvasagar/vim-table-mode'
Plug 'alvan/vim-closetag'
Plug 'gregsexton/MatchTag'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'ap/vim-buftabline'
Plug 'Vimjas/vim-python-pep8-indent'

call plug#end()

"
" PLUGINS CONFIG
" --------------------------------------------------------------------
" vim git-gutter
let g:gitgutter_sign_added='+'
let g:gitgutter_sign_modified='~'
let g:gitgutter_sign_removed='-'

" Ale
let g:ale_echo_msg_error_str='E'
let g:ale_echo_msg_warning_str='W'
let g:ale_echo_msg_format='[%linter%] %s [%severity%]'

" buftabline
let g:buftabline_numbers=1
let g:buftabline_separators=1

"
" GENERAL BEHAVIOUR
" --------------------------------------------------------------------
syntax on
filetype plugin indent on

" Remap leader
let mapleader=','

" Default indentation
set expandtab
set shiftwidth=4
set tabstop=4

" Indentation other filetypes
autocmd FileType make   setlocal ts=8 sw=8 noexpandtab
autocmd FileType go     setlocal ts=8 sw=8 noexpandtab

" General
set autoread  " reread changed files automatically
set encoding=utf8
set ffs=unix
set ttyfast
set laststatus=2  " always show statusline
set modifiable
set showmatch  " matching brackets
set mouse=a  " mouse support
set nostartofline
set incsearch  " search pattern
set hlsearch  " search highlighting
set clipboard=unnamed
set wrap  " wrap lines
set lazyredraw  " no redraw
set ignorecase
set scrolljump=8  " minimal nb of lines to scroll when cursor gets off the screen
set autochdir  " auto change working directory
set list  " show additional characters eol
set nonu  " deactivate row numbers
set fillchars=vert:┃
set nocompatible
set showmode  " show vim mode (insert, visual, replace)
set wildignorecase

" Special chars
set showbreak=\>/  " wrap lines symbol
set listchars=tab:→\ ,eol:¬,extends:>,precedes:<

" Folding
set foldmethod=indent
set foldlevel=99

" Ignore files and folders
set wildignore=*.swp,*.bak
set wildignore+=*.pyc,*.class,*.cache,*.dll,*.DS_Store,*.rdb
set wildignore+=*/__pycache__/,*/venv/*

" Deactivate bells and alerts
set tm=500

" No swp files / backups etc
set noswapfile
set nobackup

" Backspace as it should work
set backspace=indent,eol,start
set whichwrap+=<,>,h,l

" Netrw settings
let g:netrw_banner=0
let g:netrw_sort_sequence='[\/]$,*'
let g:netrw_localrmdir="rm -r"
autocmd FileType netrw setl bufhidden=delete  " delete netrw buffer

" Deactivate dbtext plugin error msg on sql completion
let g:loaded_sql_completion=0
let g:omni_sql_no_default_maps=1

" Keep visual selection when reindenting
xnoremap > >gv
xnoremap < <gv

" Save as root
command! WW :w !sudo tee % >/dev/null

" Disable automatic insertion of comment markers
set fo=cjql
autocmd FileType *         setl fo-=o fo-=r
autocmd FileType gitcommit setl fo=cjql com+=n:>

"
" THEME
" --------------------------------------------------------------------
" Colors
set t_Co=256
set bg=dark
colo simplicity

" Gui settings
if (has("gui_running"))
    set linespace=0
    set guifont=Space_Code_Pro:h13
    set guioptions-=mTrL  " remove all GUI widgets
    set macligatures      " if font supports ligatures
    " set transparency=5
    set gcr=a:blinkon0    " no blinking cursor
endif

" The below config for statusline must be set after colorscheme
" Statusline
set statusline=%{fugitive#statusline()}
set statusline+=\ %f
set statusline+=\ %{strlen(&ft)?&ft:'none'}
set statusline+=\ %{LinterStatus()}
set statusline+=\ %=
set statusline+=\ %l/%L\ c%c
set statusline+=\ %{strlen(&fenc)?&fenc:&enc}\ |

" Italics
let &t_ZH="\e[3m"
let &t_ZR="\e[23m"

"
" KEYBINDINGS
" --------------------------------------------------------------------
" Navigate window panels
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l

" Navigate brackets
map <tab> %

" Go start or end of line
nmap H ^
nmap L $
vmap L g_

" Copy paragraph
nmap cp yap<S-}>p

" Open netrw
map <F6> :Vex<cr>

" Remove search highlight
nmap <leader><space> :nohlsearch<cr>

" Editing and reloading of config
map <leader>e :e! ~/dotfiles/vim/vimrc<cr>
autocmd! bufwritepost ~/dotfiles/vim/vimrc source ~/dotfiles/vim/vimrc

" Navigate files, buffers etc. (fzf)
nmap <leader>b :Buffers<CR>
nmap <leader>f :Files<CR>
nmap <leader>l :BLines<CR>
nmap <leader>; :Rg<CR>

" Case insensitive replace word (aka multiple cursors)
nmap <Leader>x /\<<C-R>=expand('<cword>')<CR>\>\C<CR>``cgn
nmap <Leader>X ?\<<C-R>=expand('<cword>')<CR>\>\C<CR>``cgN

" cd vim into current buffer directory
nmap <leader>cd :cd %:p:h<CR>

" save current file
nmap ;; :w<CR>

" delete current buffer, keep window layout
nmap <leader>d :bp\|bd #<CR>

"
" FUNCTIONS
" --------------------------------------------------------------------

" Allow switching to buffer #<n> by typing <n>e (buftabline)
function! s:bufSwitch(count)
    if count >=# 1
        return ":\<C-U>" . count . "b\<CR>"
    endif
    return 'e'
endfunction
nmap <expr> e <SID>bufSwitch(v:count)

" Remove trailing whitespaces (run on savenes)
fun! StripTrailingWhitespaces()
    if exists('b:noStripWhitespace')
        return
    endif
    let _s=@/
    let l=line(".")
    let c=col(".")
    %s/\s\+$//e
    let @/=_s
    call cursor(l, c)
endfun
autocmd BufWritePre * :call StripTrailingWhitespaces()
autocmd FileType markdown let b:noStripWhitespace=1

" Count errors in status bar.
fun! LinterStatus() abort
    let l:counts=ale#statusline#Count(bufnr(''))
    let l:all_errors=l:counts.error + l:counts.style_error
    let l:all_non_errors=l:counts.total - l:all_errors
    return l:counts.total == 0 ? 'OK' : printf(
                \   '%dW %dE',
                \   all_non_errors,
                \   all_errors )
endfun

" Folds format
fun! CustomFoldText()
    let line=' ' . substitute(getline(v:foldstart), '^\s*"\?\s*\|\s*"\?\s*{{' . '{\d*\s*', '', 'g') . ' '
    let lines_count=v:foldend - v:foldstart + 1
    let lines_count_text=printf("%10s", '(' . lines_count . ')') . ' .'
    let foldchar=matchstr(&fillchars, 'fold:\zs.')
    let foldtextend=strpart(repeat(foldchar, v:foldlevel*2) . line, 0, (winwidth(0)*2)/3)
    let foldtextstart='+ ' . lines_count_text . repeat(foldchar, 8)
    let foldtextlength=strlen(substitute(foldtextstart . foldtextend, '.', 'x', 'g')) + &foldcolumn
    return foldtextstart . repeat(foldchar, winwidth(0)-foldtextlength) . foldtextend
endfun
set foldtext=CustomFoldText()
