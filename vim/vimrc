" File  : vimrc
" Author: Matthieu Petiteau <mpetiteau.pro@gmail.com>
" Date  : 09.01.2020
"
" vim config file
"

"
" PLUGIN MANAGER
" --------------------------------------------------------------------
" Using vim-plug
call plug#begin()

Plug 'dense-analysis/ale'
Plug 'jiangmiao/auto-pairs'
Plug 'Chiel92/vim-autoformat'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-vinegar'
Plug 'dhruvasagar/vim-table-mode'
Plug 'alvan/vim-closetag'
Plug 'gregsexton/MatchTag'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'ap/vim-buftabline'
Plug 'Vimjas/vim-python-pep8-indent'
Plug 'machakann/vim-sandwich'
Plug 'easymotion/vim-easymotion'

call plug#end()

"
" PLUGINS CONFIG
" --------------------------------------------------------------------
" vim git-gutter
let g:gitgutter_sign_added='+'
let g:gitgutter_sign_modified='~'
let g:gitgutter_sign_removed='-'

" Ale
let g:ale_echo_msg_error_str='E'
let g:ale_echo_msg_warning_str='W'
let g:ale_echo_msg_format='[%linter%] %s [%severity%]'

" buftabline
let g:buftabline_numbers=1
let g:buftabline_separators=1

"
" GENERAL BEHAVIOUR
" --------------------------------------------------------------------
syntax off  " no colors = no distractions :)
filetype plugin indent on

" Remap leader
let mapleader=','

" Default indentation
set expandtab
set shiftwidth=4
set tabstop=4

" Indentation other filetypes
autocmd FileType make   setlocal ts=8 sw=8 noexpandtab
autocmd FileType go     setlocal ts=8 sw=8 noexpandtab

" Encodings
setglobal termencoding=utf-8 fileencodings=
scriptencoding utf-8
set encoding=utf8

set nomodeline
set autoread  " reread changed files automatically
set ffs=unix
set ttyfast
set laststatus=2  " always show statusline
set modifiable
set showmatch  " matching brackets
set mouse=a  " mouse support
set nostartofline
set incsearch  " search pattern
set hlsearch  " search highlighting
set clipboard=unnamed
set wrap  " wrap lines
set lazyredraw  " no redraw
set ignorecase  " search ignore case
set scrolljump=8  " minimal nb of lines to scroll when cursor gets off the screen
set autochdir  " auto change working directory
set nonu  " hide row numbers
set fillchars=vert:┃
set nocompatible " modern vim
set showmode  " show vim mode (insert, visual, replace)
set wildignorecase
set matchpairs+=<:>

set nolist  " hide special characters
au BufNewFile,BufFilePre,BufRead *.md set list  " but activate on md files

" diff splits
set diffopt+=vertical

" Special chars
set showbreak=⤿     " wrap lines symbol
set listchars=tab:→\ ,eol:¬,extends:>,precedes:<

" Folding
set foldmethod=indent
set foldlevel=99

" Ignore files and folders
set wildignore=*.swp,*.bak
set wildignore+=*.pyc,*.class,*.cache,*.dll,*.DS_Store,*.rdb
set wildignore+=*/__pycache__/,*/venv/*

" Deactivate bells and alerts
set tm=500

" No swp files / backups etc
set noswapfile
set nobackup

" Backspace as it should work
set backspace=indent,eol,start
set whichwrap+=<,>,h,l

" Netrw settings
let g:netrw_banner=0
let g:netrw_sort_sequence='[\/]$,*'
let g:netrw_localrmdir="rm -r"
autocmd FileType netrw setl bufhidden=delete  " delete netrw buffer

" Deactivate dbtext plugin error msg on sql completion
let g:loaded_sql_completion=0
let g:omni_sql_no_default_maps=1

" Keep visual selection when reindenting
xnoremap > >gv
xnoremap < <gv

" Save as root
command! WW :w !sudo tee % >/dev/null

" Disable automatic insertion of comment markers
set fo=cjql
autocmd FileType *         setl fo-=o fo-=r
autocmd FileType gitcommit setl fo=cjql com+=n:>

" access pydocs
nmap <buffer> H :<C-u>execute "!pydoc3 " . expand("<cword>")<CR>

"
" THEME
" --------------------------------------------------------------------
set background=dark
set t_Co=256

if (has("gui_running"))
    let macvim_skip_colorscheme=1  " avoid macvim to load it's default colorscheme
    set linespace=0
    set guifont=Monaco:h13
    set guioptions-=mTrL  " remove all GUI widgets
    set gcr=a:blinkon0    " no blinking cursor
endif

" Italics
let &t_ZH="\e[3m"
let &t_ZR="\e[23m"

" Cursor mode
let &t_SI.="\e[6 q" "SI = INSERT mode
let &t_SR.="\e[4 q" "SR = REPLACE mode
let &t_EI.="\e[2 q" "EI = NORMAL mode (ELSE)

" Color on insert mode to white
autocmd InsertEnter * hi Normal ctermfg=231 guifg=#ffffff
autocmd InsertLeave * hi Normal ctermfg=229 guifg=#ffffaf

" Turn highlighting only for important stuff
hi Normal       ctermfg=229 ctermbg=NONE guifg=#ffffaf guibg=#080808

hi NonText      ctermfg=241  guifg=#626262
hi Folded       ctermfg=231  ctermbg=239 guifg=#ffffff guibg=#4e4e4e

hi DiffAdd      ctermfg=46  ctermbg=NONE guibg=NONE guifg=#00ff00
hi DiffChange   ctermfg=222 ctermbg=NONE guibg=NONE guifg=#ffd787
hi DiffText     ctermfg=165 ctermbg=NONE guibg=NONE guifg=#d700ff
hi DiffDelete   ctermfg=197 ctermbg=NONE guibg=NONE guifg=#ff005f

hi SpellBad     ctermfg=9   ctermbg=NONE cterm=underline  guifg=#ff0000 guibg=NONE gui=underline
hi SpellCap     ctermfg=50  ctermbg=NONE cterm=underline  guifg=#00ffd7 guibg=NONE gui=underline
hi SpellRare    ctermfg=128 ctermbg=NONE cterm=underline  guifg=#af00d7 guibg=NONE gui=underline
hi SpellLocal   ctermfg=123 ctermbg=NONE cterm=underline  guifg=#87ffff guibg=NONE gui=underline

hi Cursor       ctermfg=234  ctermbg=51  guifg=#262626  guibg=#00ffff
hi MatchParen   ctermfg=237  ctermbg=200 guifg=#3a3a3a  guibg=#ff00d7

hi Error        ctermfg=9 ctermbg=NONE cterm=underline  guifg=#ff0000 guibg=NONE gui=underline
hi ErrorMsg     ctermfg=9 ctermbg=NONE cterm=underline  guifg=#ff0000 guibg=NONE gui=underline

hi Statusline   ctermfg=190 ctermbg=NONE cterm=underline guifg=#d7ff00 guibg=NONE gui=underline
hi StatuslineNC ctermfg=186 ctermbg=NONE cterm=underline guifg=#d7d787 guibg=NONE gui=underline
hi VertSplit    ctermfg=190 ctermbg=NONE cterm=NONE      guifg=#d7ff00 guibg=NONE gui=NONE

hi Search       ctermfg=165 ctermbg=NONE cterm=bold           guifg=#d700ff guibg=NONE gui=bold
hi IncSearch    ctermfg=165 ctermbg=NONE cterm=bold,underline guifg=#d700ff guibg=NONE gui=bold,underline

" Statusline
set statusline=[%n]\ %<%.99f\ %y%h%w%m%r\%{FugitiveStatusline()}\ %{LinterStatus()}
set statusline+=\ %=%-14.(%l,%c%V%)
set statusline+=\ %{strlen(&fenc)?&fenc:&enc}\ %P\ %L

"
" KEYBINDINGS
" --------------------------------------------------------------------
" Navigate window panels
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l

" Navigate brackets
map <tab> %

" Go start or end of line
nmap H ^
nmap L $
vmap L g_

" Copy paragraph
nmap cp yap<S-}>p

" Open netrw
map <F6> :Vex<cr>

" Remove search highlight
nmap <leader><space> :nohlsearch<cr>

" Editing and reloading of config
map <leader>e :e! ~/dotfiles/vim/vimrc<cr>
autocmd! bufwritepost ~/dotfiles/vim/vimrc source ~/dotfiles/vim/vimrc

" Navigate files, buffers etc. (fzf)
nmap <leader>b :Buffers<CR>
nmap <leader>f :Files<CR>
nmap <leader>l :BLines<CR>
nmap <leader>; :Rg<CR>

" Case insensitive replace word (aka multiple cursors)
nmap <Leader>x /\<<C-R>=expand('<cword>')<CR>\>\C<CR>``cgn
nmap <Leader>X ?\<<C-R>=expand('<cword>')<CR>\>\C<CR>``cgN

" cd vim into current buffer directory
nmap <leader>cd :cd %:p:h<CR>

" save current file
nmap ;; :w<CR>

" delete current buffer, keep window layout
nmap <leader>d :bp\|bd #<CR>

" FUNCTIONS
" --------------------------------------------------------------------

" Allow switching to buffer #<n> by typing <n>e (buftabline)
function! s:bufSwitch(count)
    if count >=# 1
        return ":\<C-U>" . count . "b\<CR>"
    endif
    return 'e'
endfunction

nmap <expr> e <SID>bufSwitch(v:count)

" Remove trailing whitespaces (run on savenes)
function! TrimTrailingWS ()
    if exists('b:noStripWhitespace')
        return
    endif
    if search('\s\+$', 'cnw')
        :%s/\s\+$//g
    endif
endfunction

autocmd BufWritePre * :call TrimTrailingWS()
autocmd FileType markdown let b:noStripWhitespace=1

" Count errors in status bar.
fun! LinterStatus() abort
    let l:counts=ale#statusline#Count(bufnr(''))
    let l:all_errors=l:counts.error + l:counts.style_error
    let l:all_non_errors=l:counts.total - l:all_errors
    return l:counts.total == 0 ? 'OK' : printf(
                \   '%dW %dE',
                \   all_non_errors,
                \   all_errors )
endfun

" Folds format
fun! CustomFoldText()
    let line=' ' . substitute(getline(v:foldstart), '^\s*"\?\s*\|\s*"\?\s*{{' . '{\d*\s*', '', 'g') . ' '
    let lines_count=v:foldend - v:foldstart + 1
    let lines_count_text=printf("%10s", '(' . lines_count . ')') . ' .'
    let foldchar=matchstr(&fillchars, 'fold:\zs.')
    let foldtextend=strpart(repeat(foldchar, v:foldlevel*2) . line, 0, (winwidth(0)*2)/3)
    let foldtextstart='+ ' . lines_count_text . repeat(foldchar, 8)
    let foldtextlength=strlen(substitute(foldtextstart . foldtextend, '.', 'x', 'g')) + &foldcolumn
    return foldtextstart . repeat(foldchar, winwidth(0)-foldtextlength) . foldtextend
endfun

set foldtext=CustomFoldText()
