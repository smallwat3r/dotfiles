" File  : vimrc_server
" Author: Matthieu Petiteau <mpetiteau.pro@gmail.com>
" Date  : 09.01.2020
"
" vim config file for remote server (no plugins)
"
syntax on
filetype indent on

" Remap leader
let mapleader=','

" Default indentation
set expandtab
set shiftwidth=4
set tabstop=4

" Indentation other filetypes
autocmd FileType make   setlocal ts=8 sw=8 noexpandtab
autocmd FileType go     setlocal ts=8 sw=8 noexpandtab

" General
set autoread  " reread changed files automatically
set encoding=utf8
set ffs=unix
set ttyfast
set laststatus=2  " always show statusline
set modifiable
set showmatch  " matching brackets
set nostartofline
set incsearch  " search pattern
set hlsearch  " search highlighting
set clipboard=unnamed
set wrap  " wrap lines
set lazyredraw  " no redraw
set ignorecase
set scrolljump=8  " minimal nb of lines to scroll when cursor gets off the screen
set autochdir  " auto change working directory
set list  " show additional characters eol
set nonu  " deactivate row numbers
set fillchars=vert:┃
set nocompatible
set showmode  " show vim mode (insert, visual, replace)

" Special chars
set showbreak=\>/  " wrap lines symbol
set listchars=tab:→\ ,eol:¬,extends:>,precedes:<

" Folding
set foldmethod=indent
set foldlevel=99

" Ignore files and folders
set wildignore=*.swp,*.bak
set wildignore+=*.pyc,*.class,*.cache,*.dll,*.DS_Store,*.rdb
set wildignore+=*/__pycache__/,*/venv/*

" Deactivate bells and alerts
set noerrorbells
set visualbell
set t_vb=
set tm=500

" Backspace as it should work
set backspace=indent,eol,start
set whichwrap+=<,>,h,l

" Netrw settings
let g:netrw_liststyle=3
let g:netrw_banner=0
let g:netrw_bufsettings='noma nomod nonu nowrap ro nobl'
let g:netrw_sort_sequence='[\/]$,*'
let g:netrw_localrmdir="rm -r"
autocmd FileType netrw setlocal bufhidden=delete " Netrw buffer

" Deactivate dbtext error msg on sql completion
let g:loaded_sql_completion=0
let g:omni_sql_no_default_maps=1

" Keep visual selection when reindenting
xnoremap > >gv
xnoremap < <gv

" Disable automatic insertion of comment markers
set fo=cjql
autocmd FileType *         setl fo-=o fo-=r
autocmd FileType gitcommit setl fo=cjql com+=n:>

" Navigate window panels
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l

" Navigate brackets
map <tab> %

" Go start or end of line
nmap H ^
nmap L $
vmap L g_

" Copy paragraph
nmap cp yap<S-}>p

" Open netrw
map <F6> :Vex<cr>

" Remove search highlight
nmap <leader><space> :nohlsearch<cr>

" Case insensitive replace word (aka multiple cursors)
nmap <Leader>x /\<<C-R>=expand('<cword>')<CR>\>\C<CR>``cgn
nmap <Leader>X ?\<<C-R>=expand('<cword>')<CR>\>\C<CR>``cgN

" cd vim into current buffer directory
nmap <leader>cd :cd %:p:h<CR>

" save current file
nmap ;; :w<CR>

" delete current buffer, keep window layout
nmap <leader>d :bp\|bd #<CR>

" Remove trailing whitespaces (run on save)
fun! StripTrailingWhitespaces()
    if exists('b:noStripWhitespace')
        return
    endif
    let _s=@/
    let l=line(".")
    let c=col(".")
    %s/\s\+$//e
    let @/=_s
    call cursor(l, c)
endfun
autocmd BufWritePre * :call StripTrailingWhitespaces()
autocmd FileType markdown let b:noStripWhitespace=1

" Folds format
fun! CustomFoldText()
    let line=' ' . substitute(getline(v:foldstart), '^\s*"\?\s*\|\s*"\?\s*{{' . '{\d*\s*', '', 'g') . ' '
    let lines_count=v:foldend - v:foldstart + 1
    let lines_count_text=printf("%10s", '(' . lines_count . ')') . ' .'
    let foldchar=matchstr(&fillchars, 'fold:\zs.')
    let foldtextend=strpart(repeat(foldchar, v:foldlevel*2) . line, 0, (winwidth(0)*2)/3)
    let foldtextstart='+ ' . lines_count_text . repeat(foldchar, 8)
    let foldtextlength=strlen(substitute(foldtextstart . foldtextend, '.', 'x', 'g')) + &foldcolumn
    return foldtextstart . repeat(foldchar, winwidth(0)-foldtextlength) . foldtextend
endfun
set foldtext=CustomFoldText()

" Colors
set bg=dark
colo elford  "Pick a default colortheme
