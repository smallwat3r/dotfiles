#!/usr/bin/env bash
# Functions.
# Matthieu Petiteau <mpetiteau.pro@gmail.com>

# {{{1 pubkey copy public key to clipboard

pubkey() {
  more $HOME/.ssh/id_rsa.pub |
    pbcopy |
    printf 'Public key copied to clipboard.\n'
}

# }}}1
# {{{1 psg Ripgrep process

psg() {
  ps aux |
    rg -v rg |
    rg -i -e VSZ -e "$@"
}

# }}}1
# {{{1 hs Ripgrep history

hs() {
  history 1 |
    rg "$@"
}

# }}}1
# {{{1 hsu Ripgrep history (unique matches)

hsu() {
  history 1 |
    cut -c 8- |
    sort -u |
    rg "$@"
}

# }}}1
# {{{1 o open current dir or the one in args

o() {
  [[ $# -eq 0 ]] && open . || open "$@"
}

# }}}1
# {{{1 urls ripgrep - get urls

urls() {
  rg '[a-zA-Z]+://[-a-zA-Z0-9._+]+[-a-zA-Z0-9._+#=?&:;%/!~()]+'
}

# }}}1
# {{{1 mkd create and enter directory

mkd() {
  mkdir -p "$@" && cd "$@"
}

# }}}1
# {{{1 csvpreview preview csv files.

# source: http://stackoverflow.com/questions/1875305/command-line-csv-viewer
csvpreview() {
  sed 's/,,/, ,/g;s/,,/, ,/g' "$@" |
    column -s, -t |
    less -#2 -N -S
}

# }}}1
# {{{1 fe FZF select and open file

fe() {
  IFS=$'\n' files=($(fzf --query="$1" --preview "cat {}" --multi --select-1 --exit-0))
  [[ -n $files ]] && $EDITOR "${files[@]}"
}

# }}}1
# {{{1 frg FZF fuzzy ripgrep

frg() {
  local file line
  read -r file line <<<"$(
    rg --column --line-number --no-heading --smart-case $@ |
      fzf --query=$@ |
      awk -F: '{print $1, $2}'
  )"
  [[ -n $file ]] && $EDITOR $file +$line
}

# }}}1
# {{{1 fbr FZF checkout git branch (including remote branches)

fbr() {
  local branches=$(
    git branch --all |
      grep -v HEAD
  )
  local branch=$(
    echo "$branches" |
      fzf -d $(( 2 + $(wc -l <<< "$branches") )) +m
  )
  git checkout $(
    echo "$branch" |
      sed "s/.* //" |
      sed "s#remotes/[^/]*/##"
  )
}

# }}}1
# {{{1 fco FZF git commit browser

fco() {
  git log --graph --color=always --format="%C(auto)%h%d %s / %C(white)%cr by %an" "$@" |
    fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort --bind \
      "ctrl-m:execute: (
        grep -o '[a-f0-9]\{7\}' |
          head -1 |
          xargs -I % sh -c 'git show --color=always % |
          less -R') << 'FZF-EOF'
      {}
      FZF-EOF"
}

# }}}1
# {{{1 da FZF Select a docker container to start and attach to

da() {
  local cid=$(
    docker ps -a |
      sed 1d |
      fzf -1 -q "$1" |
      awk '{print $1}'
  )
  [ -n "$cid" ] && docker start "$cid" && docker attach "$cid"
}

# }}}1
# {{{1 ds FZF Select a running docker container to stop

ds() {
  local cid=$(
    docker ps |
      sed 1d |
      fzf -q "$1" |
      awk '{print $1}'
  )
  [ -n "$cid" ] && docker stop "$cid"
}

# }}}1
# {{{1 drm FZF Select a docker container to remove

drm() {
  local cid=$(
    docker ps -a |
      sed 1d |
      fzf -q "$1" |
      awk '{print $1}'
  )
  [ -n "$cid" ] && docker rm "$cid"
}

# }}}1
# {{{1 dps shorten docker ps

dps() {
  docker ps --format '{{.ID}} ¬¬¬ {{.Image}} ¬¬¬ {{.Names}} ¬¬¬ {{.Status}}' |
    column -t -s '¬¬¬' -c $(tput cols)
}

# }}}1
# {{{1 dprune docker prune

dprune() {
  printf 'y' |
    docker system prune
}

# }}}1
# {{{1 dsh docker exec

dsh() {
  docker exec -it $1 /bin/sh
}

# }}}1
# {{{1 dlog docker show logs

dlog() {
  docker logs $1 --follow
}

# }}}1
# {{{1 drm docker delete image

drm() {
  docker rmi $1 -f
}

# }}}1
